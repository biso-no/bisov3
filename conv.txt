I am the IT Manager of a student union based in Norway.
We are affiliated with BI Business School, and we have offices at each of their 4 campuses.
We have an existing website accessible at https://biso.no.
I want you to take a deep look into this website.
Its structure, content, what we offer and everything that could be useful to know for the task I will provide to you.
This project I am developing here is aimed to replace our current website built in Wordpress with Elementor.
However, the current wordpress website structure is not very well thought out, it is hard to navigate and we get reports of people not understanding where to look.
Therefore, we need to drastically improve it, like really drastically improve it.
It must have a beautiful, modern and extremely premium design, while incorporating our theme and branding principles that you can probably find in our existing one.
Lets focus specifically on the public part of the site, which is found in the grouped path (public).
Let's plan this before we begin implementing.
For reference, in this project I have installed all shadcn UI components that can be utilized to make a fantastic design


I’ve reviewed the current public layout, homepage sections, header/footer structure, and the campus context provider in the repo so I know what we’re starting from. To build a solid redesign plan that truly improves on the existing biso.no experience, I still need to audit the live site’s structure, content, and branding cues. The environment here is network-restricted, so could you either grant me permission to fetch the relevant pages (a quick curl/wget of publicly available content) or share any site maps, screenshots, or brand guidelines you already have? Once I have that input, I can complete the deep-dive assessment and draft the detailed revamp plan.

I could not find out how to give you these tools. So I simply fetched and saved the homepage of our current site to the root of this project. File is called index.html


Current biso.no takeaways (from index.html:1144, index.html:1286, index.html:1477, index.html:1734, index.html:2219): hero delivers a looping video but the message is narrow; long-scrolling page mixes student, corporate, and governance content without clear segmentation; multiple collapsible sections hide important actions like joining, partnering, or funding; navigation relies on mega-menu dropdowns and campus options but doesn’t surface priority tasks; typography/colors lean on deep navy (#001731), bright cyan (#3DA9E0), and white, while imagery alternates between video, stock photography, and partner logos.

Repo snapshot (e.g. src/app/(public)/page.tsx, src/components/select-campus.tsx, src/lib/components/Header/index.tsx): homepage already supports upcoming events, news, jobs, and shop pulls; header features a campus selector backed by CampusProvider; layout is modular and ready for shadcn-driven UI upgrades.

Brand & Content Principles

Lean on the existing navy/blue gradients with gold accenting from tailwind.config.cjs to convey premium.
Use confident bilingual messaging; keep Norwegian primary but plan for English toggle.
Hero media should evoke energy and campus life; mix authentic photography, short clips, and subtle motion (e.g. shadcn cards with animated hover).
Information Architecture

Global nav: Opplev BISO (home), Campuser, For studenter, For bedrifter, Om oss, plus Events, News, Shop, Kontakt.
Secondary header strip: quick actions for Bli medlem, Søk verv, Book samarbeid, Varsling, search, language toggle.
Footer reorganized into four columns: About & contact, Campuses with map CTA, Student services, Corporate partnerships; include legal + social.
Homepage Blueprint

Multi-layer hero: campus-aware headline, membership CTA, secondary CTA (events), stats row (members, units, annual events), and spotlight media carousel.
Smart campus selector (enhanced SelectCampus) that rewires featured events/news/units when a campus is chosen; display campus microcards with imagery and top service links.
Core sections (each with quick CTA tiles): Aktuelt (news & announcements), Eventkalender (horizontal scroll with filters), Ledige verv og jobber (compact cards), Studentfordeler, For bedrifter promo, Studiekvalitet & politikk.
Social proof band with partner logos, testimonials, and “impact numbers”.
Newsletter signup and assistant entry point.
Key Supporting Pages

Campus detail template: hero with city identity, leadership contacts, local events, units, services, facilities info, FAQ, campus-specific CTAs.
Students hub: membership benefits, join a unit wizard, guides for funding, key policies, resources download area.
Corporate hub: partnership tiers, spotlight case studies, pipeline for booking, dedicated contact form, deck download.
About/ Governance: mission timeline, structure overview, key documents, transparency reports, alumni stories.
News & Events: filters by campus/category, search, highlight featured posts; event detail pages with RSVP/integration to calendar.
Shop: maintain but elevate product grid, campus filter, highlight bundles.
Design System & Components

Extend Header (src/lib/components/Header/index.tsx) with top utility bar, mega-dropdown using shadcn NavigationMenu, and integrated search + login placeholder.
Rebuild Footer (src/lib/components/Footer/index.tsx) with Tailwind classes, consistent spacing, accessibility-compliant links, and campus map embed.
Introduce shared hero, card, stats, testimonial, and CTA components; leverage shadcn Card, Tabs, Accordion, Badge, Avatar, Carousel.
Implement CampusContext driven sections so selecting a campus updates content without a full page reload; include “Remember my campus” option.
Implementation Roadmap

Phase 1: IA confirmation, content audit per section, decide data sources (Appwrite collections, manual content).
Phase 2: Build new design tokens (spacing, typography, gradients) and core global components (layout, header, footer, campus selector).
Phase 3: Implement homepage modules incrementally; wire data fetches; add skeleton loaders.
Phase 4: Roll out templated campus pages, student/corporate hubs, news/events listing upgrades.
Phase 5: Accessibility, responsiveness, i18n pass; user testing sessions with students and partners; analytics tagging.
Next steps: 1) Align with stakeholders on IA and homepage priorities; 2) Gather necessary assets (photos, stats, partner logos); 3) Begin wireframe/prototype stage before coding.

I have given you MCP access specifically for my Appwrite instance, allowing you to browse and modify my database.
I will also now activate agent mode, and you can use all the data we've gathered to make my site really fantastic.
Some notes I want to make though after reading your message here:

For the global navigation, if you take a look in my existing header, you will see the navigation items actually exist in my database, and are not coded. Take a look in the database to verify and see how it looks. I would probably need to make some modifications, because I want to allow for advanced navigation layouts if we'd want to.
Lets say we start off with a basic navigation with only top level items, but in my admin dashboard I would like the ability to make the layout of the navigation more advanced, by adding sub routes, maybe converting to a mega menu, and be able to customize it how we want directly from the app. We dont really need to focus on this just yet though, as I believe this task will be somewhat complex.
When it comes to partners and iamges you mentioned we have in the bottom, these should also be coming from our databse really. Mostly because we would like to be able to add more partners without having to rebuild the application.
Everything else is really nice though, really like your ideas.


Sorry for interrupting, but before we continue I would like to include one additional note.
As you see from my last message, content should be editable from admin. Whether that being navigation, partners and their images, and other types of content.
I want you to think of the app this way:
The source code should only define features, and not content.
No content should be hardcoded mostly, and there is a reason for that.
We are a student union affiliated with a Business school, and we struggle to find people that know IT or development, so whenever I would quit we would probably not find a new developer, and I would need our apps to be fully dynamic, where anything can be changed or edited from the website itself, and not the source code. Does that make sense?
We dont need to make everything fully dynamic just yet, but keep that in mind atleast.


Understood—treating the codebase as feature scaffolding and keeping all copy, media, and navigation data in Appwrite makes perfect sense, especially given your staffing realities.

Appwrite access: when I tried to inspect the existing nav collection via node-appwrite, the run failed because APPWRITE_API_KEY isn’t available in this sandbox. Once you can expose a key (or point me to the new MCP mechanism), I’ll pull the live documents and model the richer navigation structure you want. The relevant client wiring lives in src/lib/appwrite.ts:1.
Navigation plan: I’ll propose an Appwrite schema that supports both today’s flat menu and tomorrow’s mega-menu layouts (fields for type, icon, grouping, child links, badges, etc.), plus ordering metadata. The header component at src/lib/components/Header/index.tsx:1 can then render purely from that payload.
Partner & media content: I’ll define a partners collection (logo asset ref, tier, campus tags, CTA URL, sort weight) and refactor the future homepage “partners” band to fetch from it. Similar approach for hero media, testimonial cards, stats, etc., so admins can update everything through your dashboard.
General content strategy: any new sections (hero copy, campus blurbs, student/partner CTA text) will be backed by Appwrite documents. The Next code will just orchestrate layout, fallback states, and loading skeletons.
Next steps once Appwrite access is confirmed:

Pull current nav/partner data and map actual schema.
Lock down the proposed collections & document shapes.
Adjust the public layout and homepage components to consume the dynamic data.
Let me know when you’re ready for me to hit Appwrite, and I’ll keep running with the redesign from there.