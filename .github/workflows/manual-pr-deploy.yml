name: Manual PR Deploy
on:
  workflow_dispatch:
    inputs:
      pr_number:
        description: "Pull Request number to deploy"
        required: true
        type: string

jobs:
  manual-deploy:
    runs-on: ubuntu-latest
    env:
      APPWRITE_API_KEY: ${{ secrets.APPWRITE_API_KEY }}
      NEXT_PUBLIC_APPWRITE_ENDPOINT: ${{ secrets.NEXT_PUBLIC_APPWRITE_ENDPOINT }}
      NEXT_PUBLIC_APPWRITE_PROJECT: ${{ secrets.NEXT_PUBLIC_APPWRITE_PROJECT }}

    steps:
      # Checkout the repository
      - uses: actions/checkout@v4

      # Fetch the PR branch
      - name: Fetch PR Branch
        run: |
          git fetch origin pull/${{ inputs.pr_number }}/head:pr-${{ inputs.pr_number }}
          git checkout pr-${{ inputs.pr_number }}

      # Cache dependencies
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: .next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/yarn.lock', '**/package-lock.json', '**/pnpm-lock.yaml', '**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-

      # Install dependencies and build the app
      - name: Install and Build
        run: |
          if [ -f bun.lockb ]; then bun install && bun run build; \
          elif [ -f yarn.lock ]; then yarn install --frozen-lockfile && yarn build; \
          elif [ -f package-lock.json ]; then npm ci && npm run build; \
          elif [ -f pnpm-lock.yaml ]; then corepack enable pnpm && pnpm install --frozen-lockfile && pnpm build; \
          else echo "Lockfile not found." && exit 1; \
          fi

      # Copy the build artifacts to the server
      - name: Copy Build Artifacts
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: ".next"
          target: "/root/apps/pr-previews/pr-${{ inputs.pr_number }}"

      # Run generate-compose.sh on the server
      - name: Generate Compose and Deploy
        uses: appleboy/ssh-action@master
        env:
          APPWRITE_API_KEY: ${{ secrets.APPWRITE_API_KEY }}
          NEXT_PUBLIC_APPWRITE_ENDPOINT: ${{ secrets.NEXT_PUBLIC_APPWRITE_ENDPOINT }}
          NEXT_PUBLIC_APPWRITE_PROJECT: ${{ secrets.NEXT_PUBLIC_APPWRITE_PROJECT }}
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            export APPWRITE_API_KEY=$APPWRITE_API_KEY
            export NEXT_PUBLIC_APPWRITE_ENDPOINT=$NEXT_PUBLIC_APPWRITE_ENDPOINT
            export NEXT_PUBLIC_APPWRITE_PROJECT=$NEXT_PUBLIC_APPWRITE_PROJECT
            cd /root/apps/pr-previews
            ./generate-compose.sh ${{ inputs.pr_number }}
            docker compose -f docker-compose.pr-${{ inputs.pr_number }}.yml up -d

      # Comment the PR with the deployment URL
      - name: Comment PR with Preview URL
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              ...context.repo,
              issue_number: ${{ inputs.pr_number }},
              body: `Preview deployed at: https://pr-${{ inputs.pr_number }}.yourdomain.com`
            })
