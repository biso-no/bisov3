name: Deploy to Production
on:
  push:
    branches:
      - master

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      APPWRITE_API_KEY: ${{ secrets.APPWRITE_API_KEY }}
      NEXT_PUBLIC_APPWRITE_ENDPOINT: ${{ secrets.NEXT_PUBLIC_APPWRITE_ENDPOINT }}
      NEXT_PUBLIC_APPWRITE_PROJECT: ${{ secrets.NEXT_PUBLIC_APPWRITE_PROJECT }}
      NEXT_PUBLIC_BASE_URL: ${{ secrets.NEXT_PUBLIC_BASE_URL }}
    steps:
      # Step 1: Checkout Repository
      - uses: actions/checkout@v4

      # Step 2: Install Canvas Dependencies
      - name: Install Canvas Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libcairo2-dev libpango1.0-dev libjpeg-dev libgif-dev librsvg2-dev

      # Step 3: Cache Dependencies
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: .next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/yarn.lock', '**/package-lock.json', '**/pnpm-lock.yaml', '**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-

      # Step 4: Install Bun
      - name: Install Bun
        run: |
          curl -fsSL https://bun.sh/install | bash
          export BUN_INSTALL="$HOME/.bun"
          export PATH="$BUN_INSTALL/bin:$PATH"
          bun --version

      # Step 5: Install and Build the Project
      - name: Install and Build
        run: |
          export BUN_INSTALL="$HOME/.bun"
          export PATH="$BUN_INSTALL/bin:$PATH"
          if [ -f bun.lockb ]; then bun install && bun run build; \
          elif [ -f yarn.lock ]; then yarn install --frozen-lockfile && yarn build; \
          elif [ -f package-lock.json ]; then npm ci && npm run build; \
          elif [ -f pnpm-lock.yaml ]; then corepack enable pnpm && pnpm install --frozen-lockfile && pnpm build; \
          else echo "Lockfile not found." && exit 1; \
          fi

      # Step 6: Verify Build Output
      - name: Verify Build Output
        run: |
          if [ ! -d ".next/standalone" ]; then
            echo "Error: standalone output not found. Ensure next.config.js has output: 'standalone'"
            exit 1
          fi

      # Step 7: Copy Build Artifacts to Server
      - name: Copy Build Artifacts to Server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: ".next/,public/"
          target: "/root/apps/bisov3"
          strip_components: 0

      # Step 8: Rebuild and restart Docker container
      - name: Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_KEY }}
          envs: APPWRITE_API_KEY,NEXT_PUBLIC_APPWRITE_ENDPOINT,NEXT_PUBLIC_APPWRITE_PROJECT,NEXT_PUBLIC_BASE_URL
          script: |
            export APPWRITE_API_KEY='${{ secrets.APPWRITE_API_KEY }}'
            export NEXT_PUBLIC_APPWRITE_ENDPOINT='${{ secrets.NEXT_PUBLIC_APPWRITE_ENDPOINT }}'
            export NEXT_PUBLIC_APPWRITE_PROJECT='${{ secrets.NEXT_PUBLIC_APPWRITE_PROJECT }}'
            export NEXT_PUBLIC_BASE_URL='${{ secrets.NEXT_PUBLIC_BASE_URL }}'
            
            cd /root/apps/bisov3
            
            # Rebuild and restart
            docker compose build
            docker compose down
            docker compose up -d

      # Step 9: Simple verification
      - name: Verify Deployment
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd /root/apps/bisov3
            
            # Check if container is running
            if docker compose ps | grep -q biso-appv3; then
              echo "Container is running!"
              exit 0
            else
              echo "Container failed to start!"
              docker compose logs
              exit 1
            fi