name: PR Preview
on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      APPWRITE_API_KEY: ${{ secrets.APPWRITE_API_KEY }}
      NEXT_PUBLIC_APPWRITE_ENDPOINT: ${{ secrets.NEXT_PUBLIC_APPWRITE_ENDPOINT }}
      NEXT_PUBLIC_APPWRITE_PROJECT: ${{ secrets.NEXT_PUBLIC_APPWRITE_PROJECT }}
      SECRET_ENV_VARIABLE: ${{ secrets.SECRET_ENV_VARIABLE }}
    steps:
      - uses: actions/checkout@v4

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: .next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/yarn.lock', '**/package-lock.json', '**/pnpm-lock.yaml', '**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-

      - name: Install and Build
        run: |
          if [ -f bun.lockb ]; then bun install && bun run build; \
          elif [ -f yarn.lock ]; then yarn install --frozen-lockfile && yarn build; \
          elif [ -f package-lock.json ]; then npm ci && npm run build; \
          elif [ -f pnpm-lock.yaml ]; then corepack enable pnpm && pnpm install --frozen-lockfile && pnpm build; \
          else echo "Lockfile not found." && exit 1; \
          fi

      - name: Copy Build Artifacts to Server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: ".next"
          target: "/root/apps/pr-previews/pr-${{ github.event.pull_request.number }}/.next"

      - name: Deploy with Docker Compose
        uses: appleboy/ssh-action@master
        env:
          APPWRITE_API_KEY: ${{ secrets.APPWRITE_API_KEY }}
          NEXT_PUBLIC_APPWRITE_ENDPOINT: ${{ secrets.NEXT_PUBLIC_APPWRITE_ENDPOINT }}
          NEXT_PUBLIC_APPWRITE_PROJECT: ${{ secrets.NEXT_PUBLIC_APPWRITE_PROJECT }}
          SECRET_ENV_VARIABLE: ${{ secrets.SECRET_ENV_VARIABLE }}
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            export APPWRITE_API_KEY=$APPWRITE_API_KEY
            export NEXT_PUBLIC_APPWRITE_ENDPOINT=$NEXT_PUBLIC_APPWRITE_ENDPOINT
            export NEXT_PUBLIC_APPWRITE_PROJECT=$NEXT_PUBLIC_APPWRITE_PROJECT
            export SECRET_ENV_VARIABLE=$SECRET_ENV_VARIABLE
            cd /root/apps/pr-previews
            ./generate-compose.sh ${{ github.event.pull_request.number }}
            docker compose -f docker-compose.pr-${{ github.event.pull_request.number }}.yml up -d

      - name: Comment PR with Preview URL
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              ...context.repo,
              issue_number: context.issue.number,
              body: `Preview deployed at: https://pr-${context.issue.number}.app.biso.no`
            })
