name: Deploy to Production
on:
  push:
    branches:
      - master

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      APPWRITE_API_KEY: ${{ secrets.APPWRITE_API_KEY }}
      NEXT_PUBLIC_APPWRITE_ENDPOINT: ${{ secrets.NEXT_PUBLIC_APPWRITE_ENDPOINT }}
      NEXT_PUBLIC_APPWRITE_PROJECT: ${{ secrets.NEXT_PUBLIC_APPWRITE_PROJECT }}
      NEXT_PUBLIC_BASE_URL: ${{ secrets.NEXT_PUBLIC_BASE_URL }}
    steps:
      # Step 1: Checkout Repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Install Canvas Dependencies
      - name: Install Canvas Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libcairo2-dev libpango1.0-dev libjpeg-dev libgif-dev librsvg2-dev

      # Step 3: Setup Bun
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      # Step 4: Cache Dependencies
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: .next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-

      # Step 5: Install and Build
      - name: Install and Build
        run: |
          bun install
          bun run build

      # Step 6: Verify Build Output
      - name: Verify Build Output
        run: |
          if [ ! -d ".next/standalone" ]; then
            echo "Error: standalone output not found. Ensure next.config.js has output: 'standalone'"
            exit 1
          fi

      # Step 7: Build Docker Container
      - name: Build Docker Container
        run: |
          docker compose build

      # Step 8: Save Docker Image
      - name: Save Docker Image
        run: |
          # Use the exact image name you provided
          docker save bisov3-app:latest -o docker-image.tar
          gzip -9 docker-image.tar

      # Step 9: Transfer Docker Image to Server
      - name: Transfer Docker Image to Server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: "docker-image.tar.gz"
          target: "/root/apps/bisov3"
          strip_components: 0

      # Step 10: Deploy on Server
      - name: Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_KEY }}
          envs: APPWRITE_API_KEY,NEXT_PUBLIC_APPWRITE_ENDPOINT,NEXT_PUBLIC_APPWRITE_PROJECT,NEXT_PUBLIC_BASE_URL
          script: |
            # Set environment variables
            export APPWRITE_API_KEY='${{ secrets.APPWRITE_API_KEY }}'
            export NEXT_PUBLIC_APPWRITE_ENDPOINT='${{ secrets.NEXT_PUBLIC_APPWRITE_ENDPOINT }}'
            export NEXT_PUBLIC_APPWRITE_PROJECT='${{ secrets.NEXT_PUBLIC_APPWRITE_PROJECT }}'
            export NEXT_PUBLIC_BASE_URL='${{ secrets.NEXT_PUBLIC_BASE_URL }}'
            
            cd /root/apps/bisov3
            
            # Load the Docker image
            echo "Loading Docker image: bisov3-app:latest"
            gunzip -f docker-image.tar.gz
            docker load -i docker-image.tar
            
            # Deploy with Docker Compose
            echo "Deploying with Docker Compose..."
            docker compose down --remove-orphans
            docker compose up -d
            
            # Clean up
            echo "Cleaning up..."
            rm docker-image.tar
            docker image prune -f

      # Step 11: Verify Deployment
      - name: Verify Deployment
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd /root/apps/bisov3
            
            # Wait for container to start
            echo "Waiting for container to start..."
            sleep 10
            
            # Check if container is running
            if docker compose ps | grep -q biso-appv3; then
              echo "✅ Container is running!"
              exit 0
            else
              echo "❌ Container failed to start!"
              docker compose logs
              exit 1
            fi